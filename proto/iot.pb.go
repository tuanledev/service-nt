// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: iot.proto

package proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import encoding_binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DeviceStatus struct {
	Date                 string   `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	Unixtime             uint32   `protobuf:"varint,2,opt,name=unixtime,proto3" json:"unixtime,omitempty"`
	Satusgps             uint32   `protobuf:"varint,3,opt,name=satusgps,proto3" json:"satusgps,omitempty"`
	Latitude             float32  `protobuf:"fixed32,4,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude            float32  `protobuf:"fixed32,5,opt,name=longitude,proto3" json:"longitude,omitempty"`
	GPShdop              float32  `protobuf:"fixed32,6,opt,name=GPShdop,proto3" json:"GPShdop,omitempty"`
	Velocity             uint32   `protobuf:"varint,7,opt,name=velocity,proto3" json:"velocity,omitempty"`
	GPSsat               uint32   `protobuf:"varint,8,opt,name=GPSsat,proto3" json:"GPSsat,omitempty"`
	FixQuality           uint32   `protobuf:"varint,9,opt,name=fixQuality,proto3" json:"fixQuality,omitempty"`
	Temp                 float32  `protobuf:"fixed32,10,opt,name=temp,proto3" json:"temp,omitempty"`
	LuckyNumber          int32    `protobuf:"varint,11,opt,name=lucky_number,json=luckyNumber,proto3" json:"lucky_number,omitempty"`
	Ms                   string   `protobuf:"bytes,12,opt,name=ms,proto3" json:"ms,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeviceStatus) Reset()         { *m = DeviceStatus{} }
func (m *DeviceStatus) String() string { return proto.CompactTextString(m) }
func (*DeviceStatus) ProtoMessage()    {}
func (*DeviceStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_iot_a2aa5ff01069afc1, []int{0}
}
func (m *DeviceStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeviceStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeviceStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DeviceStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceStatus.Merge(dst, src)
}
func (m *DeviceStatus) XXX_Size() int {
	return m.Size()
}
func (m *DeviceStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceStatus.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceStatus proto.InternalMessageInfo

func (m *DeviceStatus) GetDate() string {
	if m != nil {
		return m.Date
	}
	return ""
}

func (m *DeviceStatus) GetUnixtime() uint32 {
	if m != nil {
		return m.Unixtime
	}
	return 0
}

func (m *DeviceStatus) GetSatusgps() uint32 {
	if m != nil {
		return m.Satusgps
	}
	return 0
}

func (m *DeviceStatus) GetLatitude() float32 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *DeviceStatus) GetLongitude() float32 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *DeviceStatus) GetGPShdop() float32 {
	if m != nil {
		return m.GPShdop
	}
	return 0
}

func (m *DeviceStatus) GetVelocity() uint32 {
	if m != nil {
		return m.Velocity
	}
	return 0
}

func (m *DeviceStatus) GetGPSsat() uint32 {
	if m != nil {
		return m.GPSsat
	}
	return 0
}

func (m *DeviceStatus) GetFixQuality() uint32 {
	if m != nil {
		return m.FixQuality
	}
	return 0
}

func (m *DeviceStatus) GetTemp() float32 {
	if m != nil {
		return m.Temp
	}
	return 0
}

func (m *DeviceStatus) GetLuckyNumber() int32 {
	if m != nil {
		return m.LuckyNumber
	}
	return 0
}

func (m *DeviceStatus) GetMs() string {
	if m != nil {
		return m.Ms
	}
	return ""
}

// The response message containing the greetings
type DeviceStatusResponse struct {
	Status               bool     `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Time                 string   `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeviceStatusResponse) Reset()         { *m = DeviceStatusResponse{} }
func (m *DeviceStatusResponse) String() string { return proto.CompactTextString(m) }
func (*DeviceStatusResponse) ProtoMessage()    {}
func (*DeviceStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_iot_a2aa5ff01069afc1, []int{1}
}
func (m *DeviceStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeviceStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeviceStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DeviceStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceStatusResponse.Merge(dst, src)
}
func (m *DeviceStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeviceStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceStatusResponse proto.InternalMessageInfo

func (m *DeviceStatusResponse) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func (m *DeviceStatusResponse) GetTime() string {
	if m != nil {
		return m.Time
	}
	return ""
}

func init() {
	proto.RegisterType((*DeviceStatus)(nil), "proto.DeviceStatus")
	proto.RegisterType((*DeviceStatusResponse)(nil), "proto.DeviceStatusResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DeviceService service

type DeviceServiceClient interface {
	// Sends data devices
	GetData(ctx context.Context, in *DeviceStatus, opts ...grpc.CallOption) (*DeviceStatusResponse, error)
}

type deviceServiceClient struct {
	cc *grpc.ClientConn
}

func NewDeviceServiceClient(cc *grpc.ClientConn) DeviceServiceClient {
	return &deviceServiceClient{cc}
}

func (c *deviceServiceClient) GetData(ctx context.Context, in *DeviceStatus, opts ...grpc.CallOption) (*DeviceStatusResponse, error) {
	out := new(DeviceStatusResponse)
	err := c.cc.Invoke(ctx, "/proto.DeviceService/GetData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DeviceService service

type DeviceServiceServer interface {
	// Sends data devices
	GetData(context.Context, *DeviceStatus) (*DeviceStatusResponse, error)
}

func RegisterDeviceServiceServer(s *grpc.Server, srv DeviceServiceServer) {
	s.RegisterService(&_DeviceService_serviceDesc, srv)
}

func _DeviceService_GetData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).GetData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DeviceService/GetData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).GetData(ctx, req.(*DeviceStatus))
	}
	return interceptor(ctx, in, info, handler)
}

var _DeviceService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.DeviceService",
	HandlerType: (*DeviceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetData",
			Handler:    _DeviceService_GetData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "iot.proto",
}

func (m *DeviceStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Date) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIot(dAtA, i, uint64(len(m.Date)))
		i += copy(dAtA[i:], m.Date)
	}
	if m.Unixtime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintIot(dAtA, i, uint64(m.Unixtime))
	}
	if m.Satusgps != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintIot(dAtA, i, uint64(m.Satusgps))
	}
	if m.Latitude != 0 {
		dAtA[i] = 0x25
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Latitude))))
		i += 4
	}
	if m.Longitude != 0 {
		dAtA[i] = 0x2d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Longitude))))
		i += 4
	}
	if m.GPShdop != 0 {
		dAtA[i] = 0x35
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.GPShdop))))
		i += 4
	}
	if m.Velocity != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintIot(dAtA, i, uint64(m.Velocity))
	}
	if m.GPSsat != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintIot(dAtA, i, uint64(m.GPSsat))
	}
	if m.FixQuality != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintIot(dAtA, i, uint64(m.FixQuality))
	}
	if m.Temp != 0 {
		dAtA[i] = 0x55
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Temp))))
		i += 4
	}
	if m.LuckyNumber != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintIot(dAtA, i, uint64(m.LuckyNumber))
	}
	if len(m.Ms) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintIot(dAtA, i, uint64(len(m.Ms)))
		i += copy(dAtA[i:], m.Ms)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DeviceStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status {
		dAtA[i] = 0x8
		i++
		if m.Status {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Time) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIot(dAtA, i, uint64(len(m.Time)))
		i += copy(dAtA[i:], m.Time)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintIot(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *DeviceStatus) Size() (n int) {
	var l int
	_ = l
	l = len(m.Date)
	if l > 0 {
		n += 1 + l + sovIot(uint64(l))
	}
	if m.Unixtime != 0 {
		n += 1 + sovIot(uint64(m.Unixtime))
	}
	if m.Satusgps != 0 {
		n += 1 + sovIot(uint64(m.Satusgps))
	}
	if m.Latitude != 0 {
		n += 5
	}
	if m.Longitude != 0 {
		n += 5
	}
	if m.GPShdop != 0 {
		n += 5
	}
	if m.Velocity != 0 {
		n += 1 + sovIot(uint64(m.Velocity))
	}
	if m.GPSsat != 0 {
		n += 1 + sovIot(uint64(m.GPSsat))
	}
	if m.FixQuality != 0 {
		n += 1 + sovIot(uint64(m.FixQuality))
	}
	if m.Temp != 0 {
		n += 5
	}
	if m.LuckyNumber != 0 {
		n += 1 + sovIot(uint64(m.LuckyNumber))
	}
	l = len(m.Ms)
	if l > 0 {
		n += 1 + l + sovIot(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeviceStatusResponse) Size() (n int) {
	var l int
	_ = l
	if m.Status {
		n += 2
	}
	l = len(m.Time)
	if l > 0 {
		n += 1 + l + sovIot(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovIot(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozIot(x uint64) (n int) {
	return sovIot(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DeviceStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIot
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Date = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unixtime", wireType)
			}
			m.Unixtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Unixtime |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Satusgps", wireType)
			}
			m.Satusgps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Satusgps |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Latitude", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Latitude = float32(math.Float32frombits(v))
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Longitude", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Longitude = float32(math.Float32frombits(v))
		case 6:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field GPShdop", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.GPShdop = float32(math.Float32frombits(v))
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Velocity", wireType)
			}
			m.Velocity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Velocity |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GPSsat", wireType)
			}
			m.GPSsat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GPSsat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FixQuality", wireType)
			}
			m.FixQuality = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FixQuality |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Temp", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Temp = float32(math.Float32frombits(v))
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LuckyNumber", wireType)
			}
			m.LuckyNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LuckyNumber |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ms", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIot
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ms = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeviceStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIot
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Time = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIot(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIot
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIot
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIot
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthIot
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowIot
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipIot(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthIot = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIot   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("iot.proto", fileDescriptor_iot_a2aa5ff01069afc1) }

var fileDescriptor_iot_a2aa5ff01069afc1 = []byte{
	// 335 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0xcd, 0x4e, 0xc2, 0x40,
	0x14, 0x85, 0x99, 0xca, 0x5f, 0x2f, 0x60, 0xcc, 0x68, 0xcc, 0x04, 0x4d, 0x53, 0x59, 0x75, 0xc5,
	0x42, 0xd7, 0x6e, 0x08, 0x09, 0x3b, 0x82, 0xc3, 0x03, 0x98, 0x01, 0x46, 0x9c, 0xd8, 0x76, 0x1a,
	0x66, 0x4a, 0xe0, 0x4d, 0x7c, 0x24, 0xdd, 0xf9, 0x08, 0x06, 0x5f, 0xc4, 0xcc, 0x2d, 0xc5, 0x2e,
	0x5c, 0xcd, 0x3d, 0xe7, 0xeb, 0xdc, 0xd3, 0x9e, 0x82, 0xaf, 0xb4, 0x1d, 0x66, 0x1b, 0x6d, 0x35,
	0x6d, 0xe0, 0x31, 0xf8, 0xf4, 0xa0, 0x3b, 0x96, 0x5b, 0xb5, 0x94, 0x73, 0x2b, 0x6c, 0x6e, 0x28,
	0x85, 0xfa, 0x4a, 0x58, 0xc9, 0x48, 0x48, 0x22, 0x9f, 0xe3, 0x4c, 0xfb, 0xd0, 0xce, 0x53, 0xb5,
	0xb3, 0x2a, 0x91, 0xcc, 0x0b, 0x49, 0xd4, 0xe3, 0x27, 0xed, 0x98, 0x71, 0x17, 0xd7, 0x99, 0x61,
	0x67, 0x05, 0x2b, 0xb5, 0x63, 0xb1, 0xb0, 0xca, 0xe6, 0x2b, 0xc9, 0xea, 0x21, 0x89, 0x3c, 0x7e,
	0xd2, 0xf4, 0x16, 0xfc, 0x58, 0xa7, 0xeb, 0x02, 0x36, 0x10, 0xfe, 0x19, 0x94, 0x41, 0x6b, 0x32,
	0x9b, 0xbf, 0xae, 0x74, 0xc6, 0x9a, 0xc8, 0x4a, 0xe9, 0x76, 0x6e, 0x65, 0xac, 0x97, 0xca, 0xee,
	0x59, 0xab, 0xc8, 0x2b, 0x35, 0xbd, 0x86, 0xe6, 0x64, 0x36, 0x37, 0xc2, 0xb2, 0x36, 0x92, 0xa3,
	0xa2, 0x01, 0xc0, 0x8b, 0xda, 0x3d, 0xe5, 0x22, 0x76, 0xb7, 0x7c, 0x64, 0x15, 0xc7, 0x7d, 0xb3,
	0x95, 0x49, 0xc6, 0x00, 0xa3, 0x70, 0xa6, 0x77, 0xd0, 0x8d, 0xf3, 0xe5, 0xdb, 0xfe, 0x39, 0xcd,
	0x93, 0x85, 0xdc, 0xb0, 0x4e, 0x48, 0xa2, 0x06, 0xef, 0xa0, 0x37, 0x45, 0x8b, 0x9e, 0x83, 0x97,
	0x18, 0xd6, 0xc5, 0xa2, 0xbc, 0xc4, 0x0c, 0x46, 0x70, 0x55, 0xad, 0x92, 0x4b, 0x93, 0xe9, 0xd4,
	0x48, 0xf7, 0x5a, 0x06, 0x1d, 0x2c, 0xb5, 0xcd, 0x8f, 0x0a, 0x63, 0xcb, 0x4a, 0x7d, 0x8e, 0xf3,
	0xfd, 0x14, 0x7a, 0xc7, 0x1d, 0x72, 0xe3, 0x0e, 0xfa, 0x08, 0xad, 0x89, 0xb4, 0x63, 0x61, 0x05,
	0xbd, 0x2c, 0x7e, 0xdd, 0xb0, 0x1a, 0xd2, 0xbf, 0xf9, 0xc7, 0x2c, 0x93, 0x07, 0xb5, 0xd1, 0xc5,
	0xc7, 0x21, 0x20, 0x5f, 0x87, 0x80, 0x7c, 0x1f, 0x02, 0xf2, 0xfe, 0x13, 0xd4, 0x16, 0x4d, 0x7c,
	0xfe, 0xe1, 0x37, 0x00, 0x00, 0xff, 0xff, 0x9d, 0x5a, 0x6f, 0x71, 0x0c, 0x02, 0x00, 0x00,
}
